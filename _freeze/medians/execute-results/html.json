{
  "hash": "e39f8bcaca597c0c32d45e87691b33c1",
  "result": {
    "markdown": "---\ntitle: \"Medians\"\nbibliography: references.bib\nformat:\n  html:\n    code-copy: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Background\n\n::: callout-tip\n:::\n\n## R Examples\n\nThe summary method for a `survHE` object returns mean survival times, including the median mean survival time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survHE)\n\ndata(bc)\n\nmle <- fit.models(formula = Surv(recyrs, censrec) ~ 1,\n                  data = bc,\n                  distr = \"exp\",\n                  method = \"mle\")\n\nsummary(mle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nEstimated average survival time distribution* \n     mean        sd     2.5%  median    97.5%\n 4.522619 0.1142604 4.285068 4.52252 4.742877\n\n*Computed over the range: [0.02192-7.28493] using 1000 simulations.\nNB: Check that the survival curves tend to 0 over this range!\n```\n:::\n:::\n\n\nWe can compare these parametric estimate with the median survival time from the Kaplan-Meier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(mle$misc$km$time[mle$misc$km$surv < 0.5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.950685\n```\n:::\n:::\n\n\nIf we denote the median with $t_{50}$ then to get the medians ourselves we can take the coefficient value from the `fit.model` output and use the fact that\n\n\n$$\nt_{50} = - log (0.5)/\\lambda\n$$\n\n::: {.cell}\n\n```{.r .cell-code}\nrate <- mle$models$Exponential$coefficients\nexp(rate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1414765\n```\n:::\n\n```{.r .cell-code}\n# closed form\nmeantime <- -log(0.5)/exp(rate)\nmeantime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.899379\n```\n:::\n:::\n\n\nNote that the parameter returned from `fit.model` is the log of the rate. Alternatively, and more general, we can simulate (multiple) survival curves from the coefficient posterior and estimate the median for each of these.\n\nSo, sample from the posterior using `make.surv()` from the `survHE` package to get for the single curve case as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx <- make.surv(mle)\nmin(xx$S[[1]]$t[xx$S[[1]]$S < 0.5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.893151\n```\n:::\n:::\n\n\nIt follows that we can do something similar for multiple simulations to obtain uncertainty bounds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx <- make.surv(mle, nsim = 100)\n\n# direct estimates\nrtimes <- -log(0.5)/unlist(xx$sim)\n\n# simulated estimates\nt_S <- min(xx$S[[1]]$t[xx$S[[1]]$S < 0.5])\nt_low <- min(xx$S[[1]]$t[xx$S[[1]]$low < 0.5])\nt_upp <- min(xx$S[[1]]$t[xx$S[[1]]$upp < 0.5])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mle) + \n  geom_vline(xintercept = rtimes, alpha = 0.1, col = \"darkgrey\", size = 2) +\n  geom_vline(xintercept = meantime) +\n  geom_vline(xintercept = t_low, linetype = 2) +\n  geom_vline(xintercept = t_upp, linetype = 2)\n```\n\n::: {.cell-output-display}\n![](medians_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Multiple distributions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit2 <- fit.models(formula = Surv(recyrs, censrec) ~ 1,\n                   data = bc,\n                   dist = c(\"exp\", \"loglogistic\"),\n                   method = \"mle\")\n\nplot(fit2)\n```\n\n::: {.cell-output-display}\n![](medians_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe log-logistic distribution has CDF\n\n\n$$\n\\frac{1}{(1 + (t/\\alpha)^{\\beta})^2}\n$$\n\nWhich leads to the median $t_{50} = \\alpha$, the shape parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- list()\nsim[[1]] <- make.surv(fit2, mod = 1, nsim = 100)\nsim[[2]] <- make.surv(fit2, mod = 2, nsim = 100)\n\nsim <- purrr::transpose(sim)\n\n# direct estimates\nrtimes <- list()\nrtimes[[1]] <- -log(0.5)/sim$sim[[1]][[1]][, \"rate\"]\nrtimes[[2]] <- sim$sim[[2]][[1]][, \"scale\"]\n\n# simulated estimates\nt_S <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$S < 0.5]))\nt_low <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$low < 0.5]))\nt_upp <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$upp < 0.5]))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fit2) + \n  geom_vline(xintercept = rtimes[[1]], alpha = 0.1, col = \"pink\", size = 2) +\n  geom_vline(xintercept = rtimes[[2]], alpha = 0.1, col = \"lightblue\", size = 2) +\n  geom_vline(xintercept = t_S[[1]]) +\n  geom_vline(xintercept = t_low[[1]], linetype = 2) +\n  geom_vline(xintercept = t_upp[[1]], linetype = 2) +\n  geom_vline(xintercept = t_S[[2]]) +\n  geom_vline(xintercept = t_low[[2]], linetype = 3) +\n  geom_vline(xintercept = t_upp[[2]], linetype = 3)\n```\n\n::: {.cell-output-display}\n![](medians_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Multiple percentiles\n\nhttps://stats.stackexchange.com/questions/19005/finding-median-survival-time-from-survival-function#:~:text=M%3D%7Bt(n%2B,S(M)%3D0.5.\n\n### Compare with Kaplan-Meier\n\n\n\n### Multiple groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fits the same model using the 3 inference methods\nmle <- fit.models(formula = Surv(recyrs,censrec) ~ group,\n                  data = bc,\n                  distr = \"exp\",\n                  method = \"mle\")\nmle\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nModel fit for the Exponential model, obtained using Flexsurvreg \n(Maximum Likelihood Estimate). Running time: 0.010 seconds\n\n                 mean         se      L95%      U95%\nrate        0.0603838 0.00845542 0.0458911 0.0794534\ngroupMedium 0.8180219 0.17122084 0.4824352 1.1536086\ngroupPoor   1.5375232 0.16280169 1.2184378 1.8566087\n\nModel fitting summaries\nAkaike Information Criterion (AIC)....: 1668.212\nBayesian Information Criterion (BIC)..: 1681.805\n```\n:::\n\n```{.r .cell-code}\nxx <- make.surv(mle)\n\npurrr::map_dbl(xx$S, ~ min(.x$t[.x$S < 0.5]))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in min(.x$t[.x$S < 0.5]): no non-missing arguments to min; returning Inf\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]      Inf 5.043836 2.509589\n```\n:::\n\n```{.r .cell-code}\nrate <- mle$models$Exponential$coefficients\n\nmeantime <- -log(0.5)/rate\n\n\n## plots\n```\n:::\n",
    "supporting": [
      "medians_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}