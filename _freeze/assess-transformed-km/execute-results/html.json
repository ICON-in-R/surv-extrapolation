{
  "hash": "1f19cdf8f4b31d69c23f3982591d6558",
  "result": {
    "markdown": "---\ntitle: \"Assessing model assumptions using log-cumulative hazard plots\"\nbibliography: references.bib\nformat:\n  html:\n    code-copy: true\n---\n\n\n## Background\n\nPrior to fitting a model based on an assumed parametric form for the hazard function, a preliminary study of the validity of this assumption should be carried-out.\n\nLet us compare the survivor function for the data with that from a chosen model. To do this we will transform the survivor function to produce a plot that should give a straight line if the assumed model is appropriate.\n\nFor the Weibull, twice taking logs of the survivor function with scale parameter $\\lambda$ and shape parameter $\\gamma$\n\n\n$$\nlog(-log S(t)) = log \\lambda + \\gamma log t\n$$\n\n\nA plot of $log(-log S(t))$ against $log(t)$ would give an approximately straight line if the Weibull assumption is reasonable. The plot could also be used to give a rough estimate of the parameters.\n\nSimilarly, for the log-logistic distribution\n\n\n$$\nlog S(t)/(1 - S(t)) = \\theta - \\kappa log t\n$$\n\n\nFor the log-normal distribution\n\n\n$$\n\\Phi^{-1} (1 - S(t)) = (log t - \\mu) / \\sigma\n$$ The slope and intercept of this line provide estimates of $\\sigma^{-1}$ and $-\\mu/\\sigma$, respectively.\n\n\nWe can also check the assumption made with using the Cox regression model of proportional hazards by inspecting the log-cumulative hazard plot.\n\n\n$$\nlog H_i(t) = \\beta x_i + log H_0(t)\n$$\n\n\nThe transformed curves for different values of the explanatory variables will be parallel if PH holds.\n\nSee @Collett2013 for more details.\n\n\n## R examples\n\nThe package commonly used for survival analyses in R is the `survival` package [@TherneauT2021]. We will begin by repeating an example from the `survival` help documentation.\n\nThis uses their `reliability` data. Firstly a little data manipulation is done before we plot the cumulative hazard plot against time using the in-built `survival` package plotting method with the `cumhaz=TRUE` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survival)\n\ndata(\"reliability\", package = \"survival\")\n\nvdata <- with(valveSeat, data.frame(id = id, time2 = time, status = status))\nfirst <- !duplicated(vdata$id)\nvdata$time1 <- ifelse(first, 0, c(0, vdata$time[-nrow(vdata)]))\ndouble <- which(vdata$time1 == vdata$time2)\nvdata$time1[double] <- vdata$time1[double] - 0.01\nvdata$time2[double - 1] <- vdata$time1[double]\nvdata[1:7, c(\"id\", \"time1\", \"time2\", \"status\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   id  time1  time2 status\n1 251   0.00 761.00      0\n2 252   0.00 759.00      0\n3 327   0.00  98.00      1\n4 327  98.00 667.00      0\n5 328   0.00 326.00      1\n6 328 326.00 652.99      1\n7 328 652.99 653.00      1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- survfit(Surv(time1, time2, status) ~ 1, data = vdata, id = id)\nplot(fit, cumhaz = TRUE, xlab = \"Days\", ylab = \"Cumulative hazard\")\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nWe can plot the log-cumulative hazard against log-time by simply plotting the `survfit` output values directly by specifying the x and y data explicitly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(log(fit$time), log(fit$cumhaz), xlab = \"log-Days\", ylab = \"Log-cumulative hazard\", type = \"l\")\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nFor the following we will require the latest development version fo the `survHE` package [@Baio2020]. We can obtain this from GitHub with the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"giabaio/survHE\", ref = \"devel\")\n```\n:::\n\n\nNow we can repeat the above analysis using the `plot_transformed_km` function. By setting `distr = \"exp\"` the cumulative hazard plot is returned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_exp <- survHE::fit.models(Surv(time1, time2, status) ~ 1,\n                              data = vdata, distr = \"exp\", method = \"mle\")\nsurvHE:::plot_transformed_km(fit_exp)\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nSetting `distr = \"weibull\"` then we get the log-cumulative hazard against log-time plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_wei <- survHE::fit.models(Surv(time1, time2, status) ~ 1,\n                              data = vdata, distr = \"weibull\", method = \"mle\")\nsurvHE:::plot_transformed_km(fit_wei)\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe `plot_transformed_km` also provides plots for log-normal and log-logistic distribution assumptions with the corresponding transformation to the survival data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"plot_transformed_km() function\"}\nplot_transformed_km <- function(fit, mod = 1, add_legend = FALSE,\n                                graph = \"base\", ...) {\n  \n  dots <- list(...)\n  \n  graph <- match.arg(graph, c(\"base\", \"ggplot2\"))\n  \n  if (length(mod) != 1)\n    stop(\"Please provide at most one model index.\")\n  \n  if (is.numeric(mod) && !mod <= length(fit$models))\n    stop(\"More model names provided than available in list of model fits provided.\")\n  \n  if (is.character(mod) && !mod %in% names(fit$models))\n    stop(\"Model name not available in list of model fits provided.\")\n  \n  dist <- get_distribution(fit, mod)\n  \n  distn_names <- list(\n    \"exp\" = c(\"exp\", \"exponential\"),\n    \"weibull\" = c(\"weibull\", \"weibull.quiet\", \"weibullaf\", \"weibullph\"),\n    \"loglogistic\" = c(\"llogis\", \"loglogistic\"),\n    \"lognormal\" = c(\"lognormal\", \"lnorm\"),\n    \"gompertz\" = \"gompertz\")\n  \n  if (!dist %in% unname(unlist(distn_names)))\n    stop(\"Distribution not available.\")\n  \n  fit_km <- fit$misc$km\n  \n  n_strata <- length(fit_km$strata)\n  \n  if (n_strata == 0 || n_strata == 1) {\n    fit_km$strata <- c(\"group\" = length(fit_km$time))\n  }\n  \n  model_strata <- rep(x = names(fit_km$strata),\n                      times = fit_km$strata)\n  \n  times <- split(fit_km$time, model_strata)\n  survs <- split(fit_km$surv, model_strata)\n  \n  params <- list()\n  \n  if (dist %in% distn_names[[\"exp\"]]) {\n    params <- list(\n      FUN = \"lines\",\n      xlab = \"time\",\n      ylab = \"-log(S(t))\",\n      main = \"Exponential distributional assumption\",\n      x = times,\n      y = lapply(survs, function(x) -log(x)),\n      lty = 1:n_strata,\n      col = 1:n_strata,\n      type = \"l\")\n  }\n  \n  if (dist %in% distn_names[[\"weibull\"]]) {\n    params <- list(\n      FUN = \"lines\",\n      xlab = \"log(time)\",\n      ylab = \"log(-log(S(t))) i.e. log cumulative hazard\",\n      main = \"Weibull distributional assumption\",\n      x = lapply(times, log),\n      y = lapply(survs, function(x) log(-log(x))),\n      lty = 1:n_strata,\n      col = 1:n_strata,\n      type = \"l\")\n  }\n  \n  if (dist %in% distn_names[[\"loglogistic\"]]) {\n    params <- list(\n      FUN = \"lines\",\n      xlab = \"time\",\n      ylab = \"log(S(t)/(1-S(t)))\",\n      main = \"log-Logistic distributional assumption\",\n      x = lapply(times, log),\n      y = lapply(survs, function(x) log(x/(1 - x))),\n      lty = 1:n_strata,\n      col = 1:n_strata,\n      type = \"l\")\n  }\n  \n  if (dist %in% distn_names[[\"lognormal\"]]) {\n    params <- list(\n      FUN = \"lines\",\n      xlab = \"log(time)\",\n      ylab = expression(Phi^-1 ~ (1 - S(t))),\n      main = \"Log-normal distributional assumption\",\n      x = lapply(times, log),\n      y = lapply(survs, function(x) qnorm(1 - x)),\n      lty = 1:n_strata,\n      col = 1:n_strata,\n      type = \"l\")\n  }\n  \n  default_pars <- list(\n    x = NULL,\n    type = \"n\",\n    axes = FALSE,\n    xlab = params$xlab,\n    ylab = params$ylab,\n    main = params$main,\n    xlim = range(pretty(unlist(params$x))),\n    ylim = range(pretty(unlist(params$y))))\n  \n  setup_pars <- modifyList(\n    default_pars, dots[names(default_pars)])\n  \n  if (graph == \"base\") {\n    \n    # empty plot\n    do.call(plot, setup_pars)\n    \n    axis(1); axis(2)\n    \n    # plot lines\n    do.call(mapply, modifyList(params, dots))\n    \n    if (isTRUE(add_legend)) {\n      legend(\"topright\", names(survs), col = params$col,\n             lty = params$lty, bty = \"n\")\n    }\n  }\n  \n  if (graph == \"ggplot2\") {\n    \n    if (!add_legend) {\n      pos.legend <- \"none\"\n    } else {\n      pos.legend <- \"right\"}\n    \n    ggdata <- \n      data.frame(time = unlist(params$x),\n                 y = unlist(params$y)) |>\n      tibble::rownames_to_column(\"Group\") |> \n      mutate(Group = gsub(\"\\\\d+\", \"\", Group))\n    \n    p <- \n      ggplot(ggdata, aes(x = .data$time, y = .data$y,\n                         group = .data$Group, col = .data$Group)) +\n      geom_line() +\n      do.call(labs,\n              list(title = setup_pars$main,\n                   x = setup_pars$xlab,\n                   y = setup_pars$ylab)) +\n      theme_bw() +\n      theme(legend.position = pos.legend)\n    \n    print(p)\n  }\n  \n  invisible(params)\n}\n```\n:::\n\n\nFurther, we could use the `flexsurv` package [@Jackson2016]. This package contains lots of functions for a range of survival distributions.\n\nThe cumulative hazard can be plotted with the `flexsurv` plotting method with argument `type = \"cumhaz\"`. The Kaplan-Meier is also overlaid by the model fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"flexsurv\")\n\nfs1 <- flexsurvreg(Surv(time1, time2, status) ~ 1, data = vdata, dist = \"exp\")\nplot(fs1, type = \"cumhaz\")\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfs2 <- flexsurvreg(Surv(time1, time2, status) ~ 1, data = vdata, dist = \"weibull\")\nplot(fs2, type = \"cumhaz\")\n```\n\n::: {.cell-output-display}\n![](assess-transformed-km_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "assess-transformed-km_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}