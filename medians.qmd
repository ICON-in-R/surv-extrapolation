---
title: "Medians"
bibliography: references.bib
format:
  html:
    code-copy: true
editor_options: 
chunk_output_type: console
---

## Background

The length of time from either the date of diagnosis or the start of treatment for a disease, such as cancer, that half of the patients in a group of patients diagnosed with the disease are still alive. In a clinical trial, measuring the median overall survival is one way to see how well a new treatment works. Also called median survival.

::: callout-tip
:::

## R Examples

In this example we will see a comparison of survival probabilities at given landmarks as well as the comparison of observed (i.e. based on KM) and predicted medians (using the respective formula to calculate the median for each distribution) based on fitted models for each of the 6 distributions.

The summary method for a `survHE` object returns mean survival times, including the median mean survival time.

```{r warning=FALSE, message=FALSE}
library(survHE)

data(bc)

mle <- fit.models(formula = Surv(recyrs, censrec) ~ 1,
                  data = bc,
                  distr = "exp",
                  method = "mle")

summary(mle)
```

We can compare these parametric estimate with the median survival time from the Kaplan-Meier.

```{r}
t_med <- min(mle$misc$km$time[mle$misc$km$surv < 0.5])
t_low <- min(mle$misc$km$time[mle$misc$km$lower < 0.5])
t_upp <- min(mle$misc$km$time[mle$misc$km$upper < 0.5])

t_med
```

```{r}
survfit(Surv(recyrs, censrec) ~ 1, data = bc) |> 
  plot()
abline(h = 0.5)
abline(v = c(t_low, t_med, t_upp), lty = c(2,1,2))
```


If we denote the median with $t_{50}$ then to get the medians ourselves we can take the coefficient value from the `fit.model` output and use the fact that

$$
t_{50} = -\log (0.5)/\lambda
$$

```{r}
rate <- mle$models$Exponential$coefficients
exp(rate)

# closed form
meantime <- -log(0.5)/exp(rate)
meantime
```

Note that the parameter returned from `fit.model` is the log of the rate. Alternatively, and more general, we can simulate (multiple) survival curves from the coefficient posterior and estimate the median for each of these.

So, sample from the posterior using `make.surv()` from the `survHE` package to get for the single curve case as follows

```{r}
xx <- make.surv(mle)
min(xx$S[[1]]$t[xx$S[[1]]$S < 0.5])
```

It follows that we can do something similar for multiple simulations to obtain uncertainty bounds.

```{r}
xx <- make.surv(mle, nsim = 100)

# direct estimates
rtimes <- -log(0.5)/unlist(xx$sim)

# simulated estimates
t_S <- min(xx$S[[1]]$t[xx$S[[1]]$S < 0.5])
t_low <- min(xx$S[[1]]$t[xx$S[[1]]$low < 0.5])
t_upp <- min(xx$S[[1]]$t[xx$S[[1]]$upp < 0.5])
```

```{r}
plot(mle) + 
  geom_vline(xintercept = rtimes, alpha = 0.1, col = "darkgrey", size = 2) +
  geom_vline(xintercept = meantime) +
  geom_vline(xintercept = t_low, linetype = 2) +
  geom_vline(xintercept = t_upp, linetype = 2)
```

### Multiple distributions

```{r}
fit2 <- fit.models(formula = Surv(recyrs, censrec) ~ 1,
                   data = bc,
                   dist = c("exp", "loglogistic"),
                   method = "mle")

plot(fit2)
```

The log-logistic distribution has CDF

$$
\frac{1}{(1 + (t/\alpha)^{\beta})^2}
$$ Which leads to the median $t_{50} = \alpha$, the shape parameter.

The Gompertz distribution median is

$$
(1/b) \log[(-1/\eta) \log(0.5) + 1]
$$

The Weibull distribution median is

$$
\lambda [- \log(0.5)]^{1/k}
$$

The log-normal distribution median is

$$
\exp(\mu)
$$

The gamma distribution has no simple closed form formula for the median.

```{r}
sim <- list()
sim[[1]] <- make.surv(fit2, mod = 1, nsim = 100)
sim[[2]] <- make.surv(fit2, mod = 2, nsim = 100)

sim <- purrr::transpose(sim)

# direct estimates
rtimes <- list()
rtimes[[1]] <- -log(0.5)/sim$sim[[1]][[1]][, "rate"]
rtimes[[2]] <- sim$sim[[2]][[1]][, "scale"]

# simulated estimates
t_S <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$S < 0.5]))
t_low <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$low < 0.5]))
t_upp <- purrr::map_dbl(sim$S, ~ min(.x[[1]]$t[.x[[1]]$upp < 0.5]))
```

```{r}
plot(fit2) + 
  geom_vline(xintercept = rtimes[[1]], alpha = 0.1, col = "pink", size = 2) +
  geom_vline(xintercept = rtimes[[2]], alpha = 0.1, col = "lightblue", size = 2) +
  geom_vline(xintercept = t_S[[1]]) +
  geom_vline(xintercept = t_low[[1]], linetype = 2) +
  geom_vline(xintercept = t_upp[[1]], linetype = 2) +
  geom_vline(xintercept = t_S[[2]]) +
  geom_vline(xintercept = t_low[[2]], linetype = 3) +
  geom_vline(xintercept = t_upp[[2]], linetype = 3)
```

### Multiple percentiles

A general formula for the $p$th sample percentile of the survival time distribution is computed as

$$
q_p = \frac{1}{2}(\inf\{t:1−\hat{S}(t) ≥ p\} + \sup\{t:1−\hat{S}(t) ≤ p\})
$$

```{r warning=FALSE, message=FALSE}
mle <- fit.models(formula = Surv(recyrs, censrec) ~ 1,
data = bc,
distr = "exp",
method = "mle")

xx <- make.surv(mle)
prctile <- 0.75
min(xx$S[[1]]$t[xx$S[[1]]$S < prctile])

prctile <- c(0.975, 0.75, 0.5, 0.25, 0.025)
prctile_times <- purrr::map_dbl(prctile, ~min(xx$S[[1]]$t[xx$S[[1]]$S < .x]))

plot(mle) + 
geom_vline(xintercept = prctile_times) +
annotate("text", x = prctile_times + 0.5, y = 0.25, label = prctile)
```

### Compare with Kaplan-Meier

histograms of median posteriors for each distribution with KM point value, for different percentiles.

IDEA: this feels like posterior predictive checking thats already in rstan? so what if, rather than sample parameters and fit curve for a given distribution, we sample parameter then sample cohort survival times then fit KM then obtain medians from this? This then would contain the individual level variability as well as the parameter uncertainty...

```{r}

```

### Multiple groups

```{r}
# Fits the same model using the 3 inference methods
mle <- fit.models(formula = Surv(recyrs,censrec) ~ group,
                  data = bc,
                  distr = "exp",
                  method = "mle")
mle

xx <- make.surv(mle)

purrr::map_dbl(xx$S, ~ min(.x$t[.x$S < 0.5]))

rate <- mle$models$Exponential$coefficients

meantime <- -log(0.5)/rate


## plots
```
